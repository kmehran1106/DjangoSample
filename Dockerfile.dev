# `python-base` sets up all our shared environment variables
FROM python:3.9.7-slim-buster as python-base

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    # poetry - https://python-poetry.org/docs/configuration/#using-environment-variables
    POETRY_HOME="/opt/poetry" \
    POETRY_VERSION=1.1.8 \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    # paths - this is where our requirements + virtual environment will live
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"
# prepend poetry and venv to path
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"


# `builder-base` stage is used to build deps + create our virtual environment
FROM python-base as builder-base
ARG MODE
RUN apt-get update && apt-get install --no-install-recommends -y curl build-essential libpq-dev gcc g++
# install poetry - respects $POETRY_VERSION & $POETRY_HOME
RUN curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
# copy project requirement files here to ensure they will be cached.
WORKDIR $PYSETUP_PATH
COPY poetry.lock pyproject.toml ./
RUN poetry install

# `runner` image used for runtime
FROM python-base as runner
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH
WORKDIR /usr/src/code
RUN addgroup --system user && adduser --system --no-create-home --group user
RUN chown -R user:user /usr/src && chmod -R 755 /usr/src
COPY ./src /usr/src/code
COPY entrypoint.sh /usr/src/entrypoint.sh
RUN ["chmod", "+x", "/usr/src/entrypoint.sh"]
ENTRYPOINT ["/usr/src/entrypoint.sh", "python", "manage.py", "runserver", "0.0.0.0:8000"]
